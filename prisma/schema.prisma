generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
  schemas           = ["auth", "events", "portal", "profiles", "storage"]
  extensions        = [pg_trgm, postgis]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("auth")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("auth")
}

enum ProfileType {
  organization
  individual
  venue

  @@schema("profiles")
}

model Profile {
  id           String         @id @default(cuid())
  type         ProfileType
  name         String
  description  String
  createdAt    DateTime       @default(dbgenerated("NOW()")) @map("created_at") @db.Timestamptz
  tags         Tag[]
  images       ProfileImage[]
  links        ProfileLink[]
  organization Organization?
  individual   Individual?
  venue        Venue?

  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([tags], type: Gin)
  @@map("profiles")
  @@schema("profiles")
}

model ProfileImage {
  id        String  @id @default(cuid())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Restrict)
  profileId String  @map("profile_id")
  image     Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String  @map("image_id")

  @@index([profileId])
  @@index([imageId])
  @@map("profile_images")
  @@schema("profiles")
}

model ProfileLink {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @map("profile_id")
  url       String

  @@map("profile_links")
  @@schema("profiles")
}

model Organization {
  profile   Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String               @id @map("profile_id")
  members   OrganizationMember[]

  @@map("organizations")
  @@schema("profiles")
}

model Individual {
  profile       Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String               @id @map("profile_id")
  organizations OrganizationMember[]

  @@map("individuals")
  @@schema("profiles")
}

model Venue {
  profile     Profile                               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String                                @id @map("profile_id")
  parent      Venue?                                @relation("ChildVenues", fields: [parentId], references: [profileId], onDelete: SetNull)
  parentId    String?                               @map("parent_id")
  childVenues Venue[]                               @relation("ChildVenues")
  coords      Unsupported("geography(Point, 4326)")

  @@index([coords], type: Gist)
  @@map("venues")
  @@schema("profiles")
}

model OrganizationMember {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [profileId], onDelete: Cascade)
  organizationId String       @map("organization_id")
  individual     Individual   @relation(fields: [individualId], references: [profileId], onDelete: Cascade)
  individualId   String       @map("individual_id")
  title          String

  @@map("organization_members")
  @@schema("profiles")
}

enum Tag {
  performer // An entity which may be booked for a performance
  musician // An individual who performs music but may not be booked for a performance by themselves
  educator // An entity offering dance classes
  instructor // An individual who teaches dance
  organizer // An entity that organizes events
  photographer // An entity that captures photos at dance events
  booking_agent // An entity that handles bookings

  @@schema("profiles")
}

model TagDetails {
  tag                    Tag     @id
  label                  String
  description            String
  appliesToOrganizations Boolean @map("applies_to_organizations")
  appliesToIndividuals   Boolean @map("applies_to_individuals")
  appliesToVenues        Boolean @map("applies_to_venues")

  @@map("tags")
  @@schema("profiles")
}

enum ImageVariant {
  cover
  poster
  square

  @@schema("storage")
}

model Image {
  id           String         @id @default(cuid())
  cloudflareId String         @unique @map("cloudflare_id")
  variant      ImageVariant
  profileImage ProfileImage[]

  @@index([cloudflareId])
  @@map("images")
  @@schema("storage")
}
