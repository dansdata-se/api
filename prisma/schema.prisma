generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "multiSchema", "postgresqlExtensions", "filteredRelationCount"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
  schemas           = ["auth", "events", "portal", "profiles", "storage"]
  extensions        = [pg_trgm, postgis]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("auth")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@schema("auth")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("auth")
}

enum ProfileType {
  organization
  individual
  venue

  @@schema("profiles")
}

model ProfileEntity {
  id           String               @id @default(cuid())
  type         ProfileType
  name         String
  description  String
  createdAt    DateTime             @default(dbgenerated("NOW()")) @map("created_at") @db.Timestamptz
  images       ProfileImageEntity[]
  links        ProfileLinkEntity[]
  organization OrganizationEntity?
  individual   IndividualEntity?
  venue        VenueEntity?

  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@map("profiles")
  @@schema("profiles")
}

model ProfileImageEntity {
  id        String        @id @default(cuid())
  profile   ProfileEntity @relation(fields: [profileId], references: [id], onDelete: Restrict)
  profileId String        @map("profile_id")
  image     ImageEntity   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String        @map("image_id")

  @@index([profileId])
  @@index([imageId])
  @@map("profile_images")
  @@schema("profiles")
}

model ProfileLinkEntity {
  id        Int           @id @default(autoincrement())
  profile   ProfileEntity @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String        @map("profile_id")
  url       String

  @@unique([profileId, url])
  @@index([profileId])
  @@map("profile_links")
  @@schema("profiles")
}

model OrganizationEntity {
  profile   ProfileEntity              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String                     @id @map("profile_id")
  members   OrganizationMemberEntity[]
  tags      OrganizationTag[]

  @@index([tags], type: Gin)
  @@map("organizations")
  @@schema("profiles")
}

enum OrganizationTag {
  performer // A band or an artist who may be booked for a performance
  educator // A company or association offering dance classes
  organizer // A company or association that organizes events
  photographer // A company or association that captures photos at dance events
  booking_agent // A company or association that handles band and artist bookings

  @@schema("profiles")
}

model OrganizationTagDetail {
  tag         OrganizationTag @id
  label       String
  description String

  @@map("organization_tags")
  @@schema("profiles")
}

model IndividualEntity {
  profile       ProfileEntity              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String                     @id @map("profile_id")
  organizations OrganizationMemberEntity[]
  tags          IndividualTag[]

  @@index([tags], type: Gin)
  @@map("individuals")
  @@schema("profiles")
}

enum IndividualTag {
  musician // A person who performs music, with or without an instruments
  songwriter // A person who writes music
  instructor // A person who teaches dance
  organizer // A person who organizes events
  photographer // A person who captures photos at dance events

  @@schema("profiles")
}

model IndividualTagDetail {
  tag         IndividualTag @id
  label       String
  description String

  @@map("individual_tags")
  @@schema("profiles")
}

model VenueEntity {
  profile     ProfileEntity                         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String                                @id @map("profile_id")
  parent      VenueEntity?                          @relation("ChildVenues", fields: [parentId], references: [profileId], onDelete: SetNull)
  parentId    String?                               @map("parent_id")
  childVenues VenueEntity[]                         @relation("ChildVenues")
  coords      Unsupported("geography(Point, 4326)")

  @@index([coords], type: Gist)
  @@map("venues")
  @@schema("profiles")
}

model OrganizationMemberEntity {
  id             Int                @id @default(autoincrement())
  organization   OrganizationEntity @relation(fields: [organizationId], references: [profileId], onDelete: Cascade)
  organizationId String             @map("organization_id")
  individual     IndividualEntity   @relation(fields: [individualId], references: [profileId], onDelete: Cascade)
  individualId   String             @map("individual_id")
  title          String

  @@map("organization_members")
  @@schema("profiles")
}

enum ImageVariant {
  cover
  poster
  square

  @@schema("storage")
}

model ImageEntity {
  id           String               @id @default(cuid())
  cloudflareId String               @unique @map("cloudflare_id")
  variant      ImageVariant
  profileImage ProfileImageEntity[]

  @@index([cloudflareId])
  @@map("images")
  @@schema("storage")
}
